package Ventanas;

import javax.swing.*;
import java.awt.*;
import AnalizadorSintactico.Analizador_Lexico;
import AnalizadorSintactico.TError;
import AnalizadorSintactico.analisis_sintactico;
import java.io.BufferedReader;
import java.io.StringReader;



public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        
        setTitle("Analizador Sintáctico - Autómatas I");
        setLocationRelativeTo(null);
        setResizable(false);
        getContentPane().setBackground(new Color(245, 245, 245));

        // ===== CONFIGURACIÓN DE LABELS =====
        // Título principal
        jLabel1.setFont(new Font("Arial", Font.BOLD, 18));
        jLabel1.setForeground(new Color(76, 175, 80));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);

        // Label de instrucción
        jLabel2.setFont(new Font("Arial", Font.BOLD, 12));
        jLabel2.setForeground(new Color(60, 60, 60));

        // ===== CONFIGURACIÓN DE CAMPOS DE TEXTO =====
        // Campo de entrada de código
        jTextField1.setFont(new Font("Consolas", Font.PLAIN, 12));
        jTextField1.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(76, 175, 80), 2),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        jTextField1.setBackground(Color.WHITE);

        // Campo de resultado
        jTextArea1.setFont(new Font("Consolas", Font.PLAIN, 11));
        jTextArea1.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(200, 200, 200), 1),
            BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        jTextArea1.setBackground(new Color(248, 248, 248));
        jTextArea1.setEditable(false);

        // ===== CONFIGURACIÓN DE BOTONES =====
        // Botón Analizar
        jButton1.setText("Analizar Código");
        jButton1.setFont(new Font("Arial", Font.BOLD, 14));
        jButton1.setBackground(new Color(76, 175, 80));
        jButton1.setForeground(Color.WHITE);
        jButton1.setBorder(BorderFactory.createEmptyBorder(10, 20, 10, 20));
        jButton1.setFocusPainted(false);
        jButton1.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jButton1.setPreferredSize(new Dimension(150, 40));

        // Botón Limpiar
        Limpiar.setFont(new Font("Arial", Font.BOLD, 12));
        Limpiar.setBackground(new Color(255, 193, 7));
        Limpiar.setForeground(Color.WHITE);
        Limpiar.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        Limpiar.setFocusPainted(false);
        Limpiar.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Botón Regresar
        Regresar.setFont(new Font("Arial", Font.BOLD, 12));
        Regresar.setBackground(new Color(108, 117, 125));
        Regresar.setForeground(Color.WHITE);
        Regresar.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        Regresar.setFocusPainted(false);
        Regresar.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // ===== EFECTOS HOVER PARA BOTONES =====
        // Hover para botón Analizar
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1.setBackground(new Color(67, 160, 71));
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1.setBackground(new Color(76, 175, 80)); 
            }
        });

        // Hover para botón Limpiar
        Limpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Limpiar.setBackground(new Color(255, 179, 0));
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Limpiar.setBackground(new Color(255, 193, 7));
            }
        });

        // Hover para botón Regresar
        Regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Regresar.setBackground(new Color(90, 98, 104)); 
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Regresar.setBackground(new Color(108, 117, 125));
            }
        });

        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Limpiar = new javax.swing.JButton();
        Regresar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JOSE EDUARDO HERCULANO FLORENTINO");

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Analizador Sintactico");

        jLabel2.setText("Ingrese el codigo");

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        Regresar.setText("Menú Analizadores");
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(135, 135, 135))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Regresar)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                                    .addComponent(Limpiar))
                                .addComponent(jButton1)
                                .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(3, 3, 3)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Limpiar)
                    .addComponent(Regresar))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
String datos = jTextField1.getText();

// Validar que no esté vacío
if (datos.trim().isEmpty()) {
    jTextArea1.setText("❌ ERROR: Por favor ingrese una expresión para analizar.");
    return;
}

try {
    // Crear instancias del analizador
    Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(datos)));
    analisis_sintactico sintactico = new analisis_sintactico(lexico);
    
    // Limpiar tablas de errores previos (tanto léxicos como sintácticos)
    Analizador_Lexico.TablaEL.clear();
    analisis_sintactico.TablaES.clear();
    
    // Realizar el análisis sintáctico (que internamente usa el léxico)
    sintactico.parse();
    
    // Verificar si hay errores léxicos
    boolean hayErroresLexicos = !Analizador_Lexico.TablaEL.isEmpty();
    boolean hayErroresSintacticos = !analisis_sintactico.TablaES.isEmpty();
    
    if (hayErroresLexicos || hayErroresSintacticos) {
        StringBuilder resultado = new StringBuilder();
        resultado.append("❌ ERRORES DETECTADOS EN EL ANÁLISIS\n\n");
        
        // Mostrar errores léxicos si los hay
        if (hayErroresLexicos) {
            resultado.append("🔤 ERRORES LÉXICOS:\n");
            resultado.append(String.format("%-10s %-10s %-15s %s\n", "LÍNEA", "COLUMNA", "LEXEMA", "DESCRIPCIÓN"));
            resultado.append("---------------------------------------------------------------\n");
            
            for (TError error : Analizador_Lexico.TablaEL) {
                resultado.append(String.format("%-10d %-10d %-15s %s\n",
                        error.linea + 1, // +1 porque JFlex cuenta desde 0
                        error.columna + 1, // +1 porque JFlex cuenta desde 0
                        error.lexema.length() > 14 ? error.lexema.substring(0, 14) : error.lexema,
                        error.descripcion));
            }
            resultado.append("\n");
        }
        
        // Mostrar errores sintácticos si los hay
        if (hayErroresSintacticos) {
            resultado.append("🔧 ERRORES SINTÁCTICOS:\n");
            resultado.append(String.format("%-10s %-10s %-15s %s\n", "LÍNEA", "COLUMNA", "LEXEMA", "DESCRIPCIÓN"));
            resultado.append("---------------------------------------------------------------\n");
            
            for (TError error : analisis_sintactico.TablaES) {
                resultado.append(String.format("%-10d %-10d %-15s %s\n",
                        error.linea + 1, // +1 porque CUP cuenta desde 0
                        error.columna + 1, // +1 porque CUP cuenta desde 0
                        error.lexema.length() > 14 ? error.lexema.substring(0, 14) : error.lexema,
                        error.descripcion));
            }
            resultado.append("\n");
        }
        
        // Agregar resumen de errores
        resultado.append("📊 RESUMEN DE ERRORES:\n");
        if (hayErroresLexicos) {
            resultado.append("• Errores léxicos: ").append(Analizador_Lexico.TablaEL.size()).append("\n");
        }
        if (hayErroresSintacticos) {
            resultado.append("• Errores sintácticos: ").append(analisis_sintactico.TablaES.size()).append("\n");
        }
        resultado.append("• Total de errores: ").append(
            Analizador_Lexico.TablaEL.size() + analisis_sintactico.TablaES.size());
        
        jTextArea1.setText(resultado.toString());
        
    } else {
        // Análisis completamente exitoso (sin errores léxicos ni sintácticos)
        String resultadoFinal = "✅ ANÁLISIS LÉXICO Y SINTÁCTICO EXITOSO\n\n" +
                "📝 Expresión analizada: " + datos + "\n\n" +
                "🔍 RESULTADOS DEL ANÁLISIS:\n" +
                "• Análisis léxico: ✓ Sin errores\n" +
                "• Análisis sintáctico: ✓ Sin errores\n" +
                "• Estructura gramatical: ✓ Válida\n\n" +
                "📋 INTERPRETACIÓN:\n" +
                sintactico.resultado + "\n\n" +
                "✨ El código ingresado cumple con las reglas léxicas y sintácticas definidas.\n\n" +
                "💡 TOKENS RECONOCIDOS:\n" +
                "La expresión fue tokenizada y parseada correctamente según la gramática de Visual Basic.";
        
        jTextArea1.setText(resultadoFinal);
    }
    
} catch (Exception e) {
    // Manejo de errores críticos durante el análisis
    StringBuilder mensajeError = new StringBuilder();
    mensajeError.append("❌ ERROR CRÍTICO EN EL ANÁLISIS\n\n");
    mensajeError.append("No fue posible completar el análisis léxico-sintáctico.\n\n");
    mensajeError.append("📝 Expresión ingresada: ").append(datos).append("\n\n");
    
    // Verificar si hay errores léxicos o sintácticos parciales
    if (!Analizador_Lexico.TablaEL.isEmpty()) {
        mensajeError.append("⚠️ Se detectaron ").append(Analizador_Lexico.TablaEL.size())
                   .append(" errores léxicos antes del fallo.\n");
    }
    if (!analisis_sintactico.TablaES.isEmpty()) {
        mensajeError.append("⚠️ Se detectaron ").append(analisis_sintactico.TablaES.size())
                   .append(" errores sintácticos antes del fallo.\n");
    }
    
    mensajeError.append("\n🔍 EJEMPLOS DE CÓDIGO VÁLIDO:\n");
    mensajeError.append("• Declaración: DIM x INTEGER;\n");
    mensajeError.append("• Asignación: x = 10 + 5;\n");
    mensajeError.append("• Condicional: IF x > 5 THEN x = 1; END IF\n");
    mensajeError.append("• Ciclo: FOR i = 1 > 10 x = x + 1; NEXT i\n\n");
    
    mensajeError.append("🚨 Detalle técnico del error:\n");
    mensajeError.append(e.getMessage() != null ? e.getMessage() : "Error no especificado");
    mensajeError.append("\n\n💡 Verifique que el código siga la sintaxis de Visual Basic.");
    
    jTextArea1.setText(mensajeError.toString());
    
    // Para debugging en desarrollo
    e.printStackTrace();
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_LimpiarActionPerformed

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
    this.dispose(); // Cierra la ventana actual
    Menu menu = new Menu();
    menu.setVisible(true);
    }//GEN-LAST:event_RegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Limpiar;
    private javax.swing.JButton Regresar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
