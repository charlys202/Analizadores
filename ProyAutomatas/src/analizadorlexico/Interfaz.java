/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */package analizadorlexico;
// Importaciones necesarias
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import Ventanas.Menu;

/**
 *
 * @author Carlos
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtEntrada = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        Limpiar = new javax.swing.JButton();
        Volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ingrese el código");

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        jLabel2.setText("Analizador Lexico");

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        Volver.setText("Menú Analizadores");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(Volver)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Limpiar))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                        .addComponent(txtEntrada, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(95, 95, 95)
                            .addComponent(jLabel2))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(7, 7, 7)
                .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Limpiar)
                    .addComponent(Volver))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
   txtResultado.setText("");

    // Verificar que hay texto de entrada
    if (txtEntrada.getText().trim().isEmpty()) {
        txtResultado.setText("Error: No hay texto para analizar");
        return;
    }

    File archivo = new File("archivo.txt");
    PrintWriter escribir;

    try {
        // Escribir el texto de entrada al archivo
        escribir = new PrintWriter(archivo);
        escribir.print(txtEntrada.getText());
        escribir.close();

    } catch (FileNotFoundException ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        txtResultado.setText("Error: No se pudo crear el archivo temporal");
        return;
    }

    try {
        // Crear el lector y el lexer
        Reader lector = new BufferedReader(new FileReader("archivo.txt"));
        Lexer lexer = new Lexer(lector);
        
        // Crear encabezado con formato de tabla
        StringBuilder resultado = new StringBuilder();
        resultado.append("=== ANÁLISIS LÉXICO COMPLETADO ===\n");
        resultado.append("Texto analizado: ").append(txtEntrada.getText()).append("\n\n");
        
        // Encabezado de la tabla
       resultado.append(String.format("%-20s %-15s %-25s\n", "TOKEN", "LEXEMA", "TIPO"));
       resultado.append(new String(new char[65]).replace('\0', '=')).append("\n");
        
        int tokenCount = 0;
        boolean hasErrors = false;

        // Analizar tokens
        while (true) {
            Token tokens = lexer.yylex();

            // Si no hay más tokens, terminar
            if (tokens == null) {
                break;
            }
            
            tokenCount++;
            String tokenName = "";
            String lexema = lexer.lexeme != null ? lexer.lexeme : "";
            String tipo = "";

            // Procesar cada tipo de token
            switch (tokens) {
                case ERROR:
                    tokenName = "ERROR";
                    tipo = "Error léxico";
                    hasErrors = true;
                    break;

                case Identificador:
                    tokenName = "IDENTIFICADOR";
                    tipo = "Identificador";
                    break;

                case Numero:
                    tokenName = "NUMERO";
                    tipo = "Literal numérico";
                    break;

                // Palabras reservadas de Visual Basic
                case DIM:
                    tokenName = "DIM";
                    tipo = "Palabra reservada";
                    break;
                    
                case INTEGER:
                    tokenName = "INTEGER";
                    tipo = "Tipo de dato";
                    break;
                    
                case STRING:
                    tokenName = "STRING";
                    tipo = "Tipo de dato";
                    break;
                    
                case BOOLEAN:
                    tokenName = "BOOLEAN";
                    tipo = "Tipo de dato";
                    break;
                    
                case IF:
                    tokenName = "IF";
                    tipo = "Estructura condicional";
                    break;
                    
                case THEN:
                    tokenName = "THEN";
                    tipo = "Estructura condicional";
                    break;
                    
                case ELSE:
                    tokenName = "ELSE";
                    tipo = "Estructura condicional";
                    break;
                    
                case END:
                    tokenName = "END";
                    tipo = "Fin de bloque";
                    break;
                    
                case FOR:
                    tokenName = "FOR";
                    tipo = "Estructura de bucle";
                    break;
                    
                case NEXT:
                    tokenName = "NEXT";
                    tipo = "Estructura de bucle";
                    break;

                // Operadores aritméticos
                case PLUS:
                    tokenName = "PLUS";
                    tipo = "Operador aritmético";
                    lexema = "+";
                    break;

                case MINUS:
                    tokenName = "MINUS";
                    tipo = "Operador aritmético";
                    lexema = "-";
                    break;

                case TIMES:
                    tokenName = "TIMES";
                    tipo = "Operador aritmético";
                    lexema = "*";
                    break;
                    
                case DIVIDE:
                    tokenName = "DIVIDE";
                    tipo = "Operador aritmético";
                    lexema = "/";
                    break;
                    
                case MOD:
                    tokenName = "MOD";
                    tipo = "Operador aritmético";
                    break;

                // Operadores relacionales
                case EQUALS:
                    tokenName = "EQUALS";
                    tipo = "Operador relacional";
                    lexema = "=";
                    break;
                    
                case NOT_EQUALS:
                    tokenName = "NOT_EQUALS";
                    tipo = "Operador relacional";
                    lexema = "<>";
                    break;
                    
                case LESS_THAN:
                    tokenName = "LESS_THAN";
                    tipo = "Operador relacional";
                    lexema = "<";
                    break;
                    
                case GREATER_THAN:
                    tokenName = "GREATER_THAN";
                    tipo = "Operador relacional";
                    lexema = ">";
                    break;
                    
                case LESS_EQUAL:
                    tokenName = "LESS_EQUAL";
                    tipo = "Operador relacional";
                    lexema = "<=";
                    break;
                    
                case GREATER_EQUAL:
                    tokenName = "GREATER_EQUAL";
                    tipo = "Operador relacional";
                    lexema = ">=";
                    break;

                // Operadores lógicos
                case AND:
                    tokenName = "AND";
                    tipo = "Operador lógico";
                    break;
                    
                case OR:
                    tokenName = "OR";
                    tipo = "Operador lógico";
                    break;
                    
                case NOT:
                    tokenName = "NOT";
                    tipo = "Operador lógico";
                    break;

                // Operador de asignación
                case ASSIGN:
                    tokenName = "ASSIGN";
                    tipo = "Asignación";
                    lexema = "=";
                    break;

                // Delimitadores
                case LPAREN:
                    tokenName = "LPAREN";
                    tipo = "Delimitador";
                    lexema = "(";
                    break;
                    
                case RPAREN:
                    tokenName = "RPAREN";
                    tipo = "Delimitador";
                    lexema = ")";
                    break;
                    
                case SEMICOLON:
                    tokenName = "SEMICOLON";
                    tipo = "Delimitador";
                    lexema = ";";
                    break;
                    
                case COMMA:
                    tokenName = "COMMA";
                    tipo = "Delimitador";
                    lexema = ",";
                    break;

                default:
                    tokenName = tokens.toString();
                    tipo = "Desconocido";
                    break;
            }
            
            // Agregar fila a la tabla formateada
            resultado.append(String.format("%-20s %-15s %-25s\n", 
                           tokenName, 
                           lexema.length() > 14 ? lexema.substring(0, 14) : lexema, 
                           tipo));
        }

        // Pie de la tabla
        resultado.append(new String(new char[65]).replace('\0', '=')).append("\n");
        resultado.append("Total de tokens analizados: ").append(tokenCount).append("\n");
        
        if (hasErrors) {
            resultado.append("⚠️  ADVERTENCIA: Se encontraron errores léxicos\n");
        } else {
            resultado.append("✅ Análisis completado sin errores\n");
        }
        
        resultado.append("\n=== RESUMEN DE TOKENS RECONOCIDOS ===\n");
        resultado.append("• Palabras reservadas: DIM, INTEGER, STRING, BOOLEAN, IF, THEN, ELSE, END, FOR, NEXT\n");
        resultado.append("• Operadores aritméticos: +, -, *, /, MOD\n");
        resultado.append("• Operadores relacionales: =, <>, <, >, <=, >=\n");
        resultado.append("• Operadores lógicos: AND, OR, NOT\n");
        resultado.append("• Delimitadores: (, ), ;, ,\n");
        resultado.append("• Identificadores y números\n");


        // Mostrar resultado en el área de texto
        txtResultado.setText(resultado.toString());

        // Cerrar el lector
        lector.close();
        
    } catch (FileNotFoundException ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        txtResultado.setText("Error: No se encontró el archivo temporal");
        
    } catch (IOException ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        txtResultado.setText("Error de E/S: " + ex.getMessage());
        
    } catch (Exception ex) {
        Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        txtResultado.setText("Error inesperado: " + ex.getMessage());
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
    this.dispose();

    // Abrir la interfaz principal del menú
    Menu menu = new Menu();
    menu.setLocationRelativeTo(null); // (Opcional) Centrar ventana
    menu.setVisible(true);
    }//GEN-LAST:event_VolverActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
    txtResultado.setText("");
    }//GEN-LAST:event_LimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Limpiar;
    private javax.swing.JButton Volver;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
